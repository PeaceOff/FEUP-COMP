/* Simple2.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Simple2.java */
import java.io.*;
import java.util.*;

public class Simple2/*@bgen(jjtree)*/implements Simple2TreeConstants, Simple2Constants {/*@bgen(jjtree)*/
  protected static JJTSimple2State jjtree = new JJTSimple2State();public static void main(String args []) throws FileNotFoundException
  {
    if(args.length < 1){
      System.out.println("Pease Feed me with a filename.");
      System.exit(1);
    }

    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    Simple2 parser = new Simple2(new FileInputStream(args[0])); //Feed me with one file :3    try
    {
      SimpleNode n = parser.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  static final public SimpleNode Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Module();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Module() throws ParseException {/*@bgen(jjtree) Module */
                 ASTModule jjtn000 = new ASTModule(JJTMODULE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(MODULE);
      t1 = jj_consume_token(ID);
      jj_consume_token(LCHAVETA);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Declaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Function();
      }
      jj_consume_token(RCHAVETA);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.value = t1.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Declaration() throws ParseException {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Element();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 31:{
          ArrayDeclaration();
          break;
          }
        case ADDSUB_OP:
        case INTEGER:{
          NumericDeclaration();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void NumericDeclaration() throws ParseException {/*@bgen(jjtree) NumericDeclaration */
                             ASTNumericDeclaration jjtn000 = new ASTNumericDeclaration(JJTNUMERICDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t1, sign;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:{
        sign = jj_consume_token(ADDSUB_OP);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      t1 = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.value = t1.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArrayDeclaration() throws ParseException {/*@bgen(jjtree) ArrayDeclaration */
  ASTArrayDeclaration jjtn000 = new ASTArrayDeclaration(JJTARRAYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(31);
      ArraySize();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Function() throws ParseException {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(FUNCTION);
      t1 = FunctionDecl();
      FunctionParameters();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.value = t1.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Token FunctionDecl() throws ParseException {/*@bgen(jjtree) FunctionDecl */
                        ASTFunctionDecl jjtn000 = new ASTFunctionDecl(JJTFUNCTIONDECL);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t1, t2 = null;
    try {
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case 31:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 31:{
          ElementArray();

          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        t2 = FunctionReturn();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
if(t2 != null){
    jjtn000.value = t1;
    {if ("" != null) return t2;}
  }else{
    jjtn000.value = null;
    {if ("" != null) return t1;}
  }
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void FunctionReturnV() throws ParseException {/*@bgen(jjtree) FunctionReturnV */
  ASTFunctionReturnV jjtn000 = new ASTFunctionReturnV(JJTFUNCTIONRETURNV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementArray();
      FunctionReturn();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Token FunctionReturn() throws ParseException {Token t;
    jj_consume_token(ASSIGN);
    t = jj_consume_token(ID);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void FunctionParameters() throws ParseException {/*@bgen(jjtree) FunctionParameters */
  ASTFunctionParameters jjtn000 = new ASTFunctionParameters(JJTFUNCTIONPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        Varlist();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Varlist() throws ParseException {
    Element();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRG:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      Element();
    }
  }

  static final public void Element() throws ParseException {/*@bgen(jjtree) Element */
                ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        ElementArray();

        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.value = t1.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElementArray() throws ParseException {
    jj_consume_token(31);
    jj_consume_token(32);
  }

  static final public void ArrayElement() throws ParseException {/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      jj_consume_token(31);
      jj_consume_token(32);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ScalarElement() throws ParseException {/*@bgen(jjtree) ScalarElement */
  ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Stmtlst() throws ParseException {/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:
        case IF:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        Stmt();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:{
      While();
      break;
      }
    case IF:{
      If();
      break;
      }
    case ID:{
      AssignCall();
      jj_consume_token(PVIRG);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AssignCall() throws ParseException {/*@bgen(jjtree) AssignCall */
  ASTAssignCall jjtn000 = new ASTAssignCall(JJTASSIGNCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      AssignCall2();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AssignCall2() throws ParseException {/*@bgen(jjtree) AssignCall2 */
  ASTAssignCall2 jjtn000 = new ASTAssignCall2(JJTASSIGNCALL2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        jj_consume_token(31);
        Index();
        jj_consume_token(32);
        Assign2();
        break;
        }
      case LPAR:{
        Call2();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:
        case 33:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 33:{
            jj_consume_token(33);
            jj_consume_token(ID);
            Call2();
            break;
            }
          case SIZE:{
            jj_consume_token(SIZE);
            Assign2();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Assign2() throws ParseException {/*@bgen(jjtree) Assign2 */
  ASTAssign2 jjtn000 = new ASTAssign2(JJTASSIGN2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSIGN);
      Rhs();
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      Rhs();
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Lhs() throws ParseException {
    ArrayOrScalar();
  }

  static final public void Rhs() throws ParseException {/*@bgen(jjtree) #ADefiniteNode( 2) */
                               ASTADefiniteNode jjtn000 = new ASTADefiniteNode(JJTADEFINITENODE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:{
        Term();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ARITH_OP:{
            t1 = jj_consume_token(ARITH_OP);
            break;
            }
          case BITWISE_OP:{
            t1 = jj_consume_token(BITWISE_OP);
            break;
            }
          case ADDSUB_OP:{
            t1 = jj_consume_token(ADDSUB_OP);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Term();
jjtn000.value = t1.image;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
        }
      case 31:{
        ArrayDeclaration();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
    }
    }
  }

  static final public void ArraySize() throws ParseException {/*@bgen(jjtree) ArraySize */
                    ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        t1 = jj_consume_token(ID);
        ScalarAccess2();
        break;
        }
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
jjtn000.value = t1.image;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Term() throws ParseException {/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:{
        jj_consume_token(ADDSUB_OP);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        jj_consume_token(INTEGER);
        break;
        }
      case ID:{
        CallArray();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CallArray() throws ParseException {/*@bgen(jjtree) CallArray */
  ASTCallArray jjtn000 = new ASTCallArray(JJTCALLARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      CallArray2();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CallArray2() throws ParseException {/*@bgen(jjtree) CallArray2 */
  ASTCallArray2 jjtn000 = new ASTCallArray2(JJTCALLARRAY2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        ArrayXAccess();
        break;
        }
      case LPAR:{
        Call2();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:
        case 33:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 33:{
            jj_consume_token(33);
            jj_consume_token(ID);
            Call2();
            break;
            }
          case SIZE:{
            jj_consume_token(SIZE);
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Exprtest() throws ParseException {/*@bgen(jjtree) Exprtest */
                   ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(LPAR);
      Lhs();
      t1 = jj_consume_token(RELA_OP);
      Rhs();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.value = t1.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Call() throws ParseException {/*@bgen(jjtree) Call */
  ASTCall jjtn000 = new ASTCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case ID:
      case STRING:{
        ArgumentList();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Call2() throws ParseException {/*@bgen(jjtree) Call2 */
  ASTCall2 jjtn000 = new ASTCall2(JJTCALL2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case ID:
      case STRING:{
        ArgumentList();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRG:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        Argument();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Argument() throws ParseException {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        t1 = jj_consume_token(ID);
        break;
        }
      case STRING:{
        t1 = jj_consume_token(STRING);
        break;
        }
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.value = t1;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArrayOrScalar() throws ParseException {/*@bgen(jjtree) ArrayOrScalar */
  ASTArrayOrScalar jjtn000 = new ASTArrayOrScalar(JJTARRAYORSCALAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        ArrayXAccess();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ScalarAccess2();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArrayXAccess() throws ParseException {/*@bgen(jjtree) ArrayXAccess */
  ASTArrayXAccess jjtn000 = new ASTArrayXAccess(JJTARRAYXACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(31);
      Index();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ScalarAccess2() throws ParseException {/*@bgen(jjtree) ScalarAccess2 */
  ASTScalarAccess2 jjtn000 = new ASTScalarAccess2(JJTSCALARACCESS2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        jj_consume_token(SIZE);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ScalarAccess() throws ParseException {/*@bgen(jjtree) ScalarAccess */
  ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        jj_consume_token(SIZE);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Index() throws ParseException {/*@bgen(jjtree) Index */
                 ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
        try {
          t1 = jj_consume_token(ID);
        } finally {
if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
        }
        break;
        }
      case INTEGER:{
ASTConstant jjtn002 = new ASTConstant(JJTCONSTANT);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
        try {
          t1 = jj_consume_token(INTEGER);
        } finally {
if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
        }
jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
jjtn000.value = t1.image;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Simple2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x84000100,0x8000,0x100,0x80000000,0x80008000,0x8000000,0x80000,0x80000000,0x8003000,0x8003000,0x2000000,0x2000000,0x80020000,0x700,0x700,0x8c000100,0xc000000,0x100,0xc000000,0x2000000,0x2000000,0x80020000,0x4000,0x0,0x4c000000,0x4c000000,0x80000,0x4c000000,0x80000000,0x0,0x0,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,};
   }

  /** Constructor with InputStream. */
  public Simple2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Simple2(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Simple2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Simple2(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Simple2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Simple2(Simple2TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Simple2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
