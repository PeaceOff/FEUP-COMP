/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Simple2)
public class Simple2{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new Simple2(System.in);    try    {      SimpleNode n = Simple2.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Simple2)<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

//void Start() : { } { }

/* Gramática , falta alterar algumas pequenas coisas para adaptar a portugues
Module::= <MODULE> <ID> <LCHAVETA> (Declaration)* (Function)* <RCHAVETA>
Declaration::= (ArrayElement | ScalarElement) (<ASSIGN> (("["ArraySize"]") | (<ADDSUB_OP>)? <INTEGER>))? <PVIRG>
Function::= ((<FUNCTION> (ArrayElement | ScalarElement) <ASSIGN> <ID> <LPAR> (Varlist)? <RPAR>) | (<FUNCTION> <ID> <LPAR> (Varlist)? <RPAR>)) <LCHAVETA>Stmtlst<RCHAVETA>
Varlist::= (ArrayElement | ScalarElement) (<VIRG> (ArrayElement| ScalarElement))*
ArrayElement::= <ID> "[" "]"
ScalarElement::= <ID>
Stmtlst::= (Stmt)*
Stmt::= While | If | Assign | Call<PVIRG>
Assign::= Lhs<ASSIGN>Rhs<PVIRG>
Lhs::= ArrayAccess | ScalarAccess
Rhs::=(Term ((<ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP>) Term)?) | "["ArraySize"]"
ArraySize::= ScalarAccess | <INTEGER>
Term::= (<ADDSUB_OP>)? (<INTEGER> | Call | ArrayAccess | ScalarAccess)
Exprtest::= <LPAR>Lhs<RELA_OP>Rhs<RPAR>
While::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>
If::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> (<ELSE> <LCHAVETA> Stmtlst <RCHAVETA>)?
Call::=<ID> ("."<ID>)? <LPAR> (ArgumentList)? <RPAR>
ArgumentList::= Argument(<VIRG> Argument)*
Argument::= (<ID> | <STRING> | <INTEGER>)
ArrayAccess::= <ID> "["Index"]"
ScalarAccess::= <ID> ("." <SIZE>)?
Index::= <ID> | <INTEGER>
*/
