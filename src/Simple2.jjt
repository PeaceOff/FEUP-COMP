/**

import java.io.*;
import java.io.FileNotFoundException;
import java.util.*;
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 * Tabela de simbolos
 * Array? Tamanho
 *
 */
options
{
  static = true;
  LOOKAHEAD = 1;
  IGNORE_CASE = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(Simple2)

import java.io.*;
import java.util.*;

public class Simple2
{

	public static boolean split = false;
	
  public static void main(String args [])
  {
    if(args.length < 1){
      System.out.println("Please Feed me with a filename.");
      System.exit(1);
    }
     //Feed me with one file :3
    try
    {
      Simple2 parser = new Simple2(new FileInputStream(args[0]));
      SimpleNode root = parser.Start();
      root.dump("");

	  SymbolTableBuilder stb = new SymbolTableBuilder();
	  root.jjtAccept(stb,null);
	  System.out.println(SymbolTable.getTable().toString());
	  System.out.println(ErrorManager.getString());
	  
	  System.out.println("Beginning Function Call Checking!");
	  ErrorManager.clearErrors();
	  FunctionCallChecker fcc = new FunctionCallChecker();
	  root.jjtAccept(fcc,null);
	  System.out.println(ErrorManager.getString());

	  System.out.println("Beginning Assign Checking!");
	  ErrorManager.clearErrors();
	  AssignChecker acc = new AssignChecker();
	  root.jjtAccept(acc,null);
	  System.out.println(ErrorManager.getString());

      System.out.println("Creating jasmine file...");

      CodeSampler.createCodeSampler("../dummy.yasmine");
      CodeGenerator cgn = new CodeGenerator();
      root.jjtAccept(cgn, null);
      CodeSampler.getCodeSampler().close();

      System.out.println("Thank you.");
    }catch (FileNotFoundException e){
      System.out.println("File Error!");
      e.printStackTrace();
    }
    catch (Exception e)
    {
      e.printStackTrace();
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

/*
  public void build_symbol_table(SimpleNode node) {

    	if(node.jjtGetNumChildren() == 0) // leaf node with integer value
			return node.val;
		else if(node.jjtGetNumChildren() == 1) // only one child
			return this.eval((SimpleNode) node.jjtGetChild(0));

		SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
		SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

		//Construir a tabela de simbolos

		return 0;
    }
 */
}

PARSER_END(Simple2)

<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Start() : { }
{
  Module()
  {return jjtThis;}
}

void Module() : {Token t1;}
{
  <MODULE> t1 = <ID> <LCHAVETA> (Declaration())* (Function())* <RCHAVETA>
  {jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}
}

void Declaration(): {Token t1;} //FIRST: First(ArrayElement, ScalarElement) <ASSIGN> <PVIRG>
{
  (Element()) (t1 = <ASSIGN> ( ArrayDeclaration() | NumericDeclaration()) {jjtThis.line = t1.beginLine;})? <PVIRG> // E (= ([100] | -? Integer)   )?  E[] = [100]
}

void NumericDeclaration() : {Token t1, sign;}
{
  (sign = <ADDSUB_OP>{jjtThis.value=sign.image;jjtThis.line = sign.beginLine;}#Sign)?
  (t1 = <INTEGER> {jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#Constant)
}

void ArrayDeclaration() : {}
{
  ( "[" ArraySize() "]" )
}

void Function() : {Token t1;} //Fisrt FUNCTION!
{
  <FUNCTION> t1 = FunctionDecl() FunctionParameters() <LCHAVETA>Stmtlst()<RCHAVETA> // (ElementArray()? t1=FunctionReturn(t1))?
  {jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}
}

Token FunctionDecl()#Return : {Token t1, t2 = null;}
{
t1 = <ID> ( (ElementArray() {/*Mark as array*/})? (t2 = FunctionReturn()))? //Mark as array
  {if(t2 != null){
    jjtThis.value = t1.image;
    jjtThis.line = t1.beginLine;
    return t2;
  }else{
    jjtThis.value = null;
    return t1;
  }}
}

Token FunctionReturn()#void : {Token t;}
{
	<ASSIGN> t = <ID>
  {return t;}
}

void FunctionParameters()#Parameters : { }
{
	<LPAR> (Varlist())? <RPAR>
}

void Varlist()#void : {}
{
  (Element()) (<VIRG> (Element()))*
}

void Element() #Variable :{Token t1;}
{
  t1 = <ID> (ElementArray() {/*mark as array    */})? //A ou A[]    A->ElementArray
  {jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}
}

void ElementArray():{}
{
  "[" "]"
}

/*
void ArrayElement() : {}
{
  <ID> "[" "]"
}

void ScalarElement() : {}
{
  <ID>
}/**/

void Stmtlst() #Statements: {}
{
  (Stmt())*
}

void Stmt() #void : {}
{
  While() | If() | AssignOrCall() <PVIRG> //AssignCall -> Assign() Call() =
}

void AssignOrCall()#Assign(>1) : {Token t1; boolean res;}
{
  res = CallArray() {if(res) return;} t1 = <ASSIGN> {jjtThis.value = t1.image; jjtThis.line=t1.beginLine;} Rhs()
}
//--------------------------------------------------------

//#########
/*
boolean AssignOrCall2() : {Token t; boolean res;}
{
  t = <ID> res = AssignOrCall3()
  {
    jjtThis.value = t.image;
    return res;
  }
}

boolean AssignOrCall3() : {boolean b = false;}
{
  ((ArrayXAccess())
  | (Call2(){return false;} )
  | ("." ((<ID> Call2(){return false;}) | (<SIZE>)))?)

  {return true;}
}/**/
//----------------------------------------------------------

/*void Assign() : {}
{
  Lhs() <ASSIGN> Rhs() <PVIRG>
}*/

void Lhs()#void : {}
{
  ArrayOrScalar()
}

void Rhs()#CalcOP(>1): {Token t1;}
{
  (Term() (( (t1 = <ARITH_OP>) | (t1 = <BITWISE_OP>) | (t1 = <ADDSUB_OP>) ) Term()
            {
              jjtThis.value = t1.image;jjtThis.line = t1.beginLine;
            }
          )?)
  | ArrayDeclaration()
}

void ArraySize()#void : {Token t1;}
{
 ( ArraySizeAux() | (t1 = <INTEGER>{jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#Constant))

}

void ArraySizeAux()#Access : {Token t1;}
{
  t1 = <ID> {jjtThis.value = t1.image; jjtThis.line = t1.beginLine;}
  ScalarAccess2()
}

void Term() : {Token s1, t1;}
{
  (s1 = <ADDSUB_OP> {jjtThis.value = s1.image;jjtThis.line = s1.beginLine;} #Sign)? (t1 = <INTEGER> {jjtThis.value = t1.image;jjtThis.line = t1.beginLine;} #Integer |  CallArray()) //CallArray -> Call() | ArrayOrScalar()
}

boolean CallArrayT(Token t1)#Call(Simple2.split) : {boolean call;}
{	
  	call = CallArray2() //ID.Size

  	{jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}
  	{
    	return call;
  	}
}

boolean CallArray()#Access(!Simple2.split) : {Token t1; boolean call;}
{
  t1 = <ID>
  
  call = CallArrayT(t1)
  {
    jjtThis.value = t1.image;jjtThis.line = t1.beginLine;
    return call;
  }
}

boolean CallArray2()#void : {Token t;}
{
  (
  (ArrayXAccess())
  | Call2(){Simple2.split = true; return true;}
  | ("." ((t = <ID>{jjtThis.value = t.image;jjtThis.line = t.beginLine;}#CallName Call2(){Simple2.split = true;return true;}) | (<SIZE>)#Size))?
  )
  {Simple2.split=false; return false;}
}

void Exprtest() #ConditionOP : {Token t1;}
{
  <LPAR> Lhs() t1 = <RELA_OP> Rhs() <RPAR>
  {
    jjtThis.value = t1.image;
    jjtThis.line = t1.beginLine;
  }
}

void While() : {}
{
  <WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

void If() : {}
{
  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> (<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>)?
}

void Call()#Call : {}
{
  <ID> ("." <ID>)? <LPAR> (ArgumentList())? <RPAR>
}

void Call2()#void : {}
{
  <LPAR> (ArgumentList())? <RPAR>
}

void ArgumentList() : {}
{
  Argument() (<VIRG> Argument())*
}

void Argument()#void : {Token t1;}
{
  ( (t1 = <ID>{jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#Variable)
  | (t1 = <STRING>{jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#String)
  | (t1 = <INTEGER>{jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#Constant) )

}

void ArrayOrScalar()#Access : {Token t;}
{
  t = <ID> (ArrayXAccess() | ScalarAccess2())
  {jjtThis.value = t.image;jjtThis.line = t.beginLine;}
}

void ArrayXAccess()#void: {}
{
  "[" Index() "]"
}

void ScalarAccess2()#void: {}
{
  ("." <SIZE> #Size)?
}

/*
void ScalarAccess() : {}
{
  <ID> ("." <SIZE>)?
}/**/

void Index() #void : { Token t1;}
{
  (t1 = <ID>{ jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#Variable) | ( t1 = <INTEGER>{ jjtThis.value = t1.image;jjtThis.line = t1.beginLine;}#Constant)
}

/* Gramï¿½tica , falta alterar algumas pequenas coisas para adaptar a portugues
Module::= <MODULE> <ID> <LCHAVETA> (Declaration)* (Function)* <RCHAVETA>
Declaration::= (ArrayElement | ScalarElement) (<ASSIGN> (("["ArraySize"]") | (<ADDSUB_OP>)? <INTEGER>))? <PVIRG>
Function::= ((<FUNCTION> (ArrayElement | ScalarElement) <ASSIGN> <ID> <LPAR> (Varlist)? <RPAR>) | (<FUNCTION> <ID> <LPAR> (Varlist)? <RPAR>)) <LCHAVETA>Stmtlst<RCHAVETA>  *conflito em FUNCTION
Varlist::= (ArrayElement | ScalarElement) (<VIRG> (ArrayElement| ScalarElement))*
ArrayElement::= <ID> "[" "]"
ScalarElement::= <ID>
Stmtlst::= (Stmt)*
Stmt::= While | If | Assign | Call<PVIRG> *conflito de ID
Assign::= Lhs<ASSIGN>Rhs<PVIRG>
Lhs::= ArrayAccess | ScalarAccess
Rhs::=(Term ((<ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP>) Term)?) | "["ArraySize"]"
ArraySize::= ScalarAccess | <INTEGER>
Term::= (<ADDSUB_OP>)? (<INTEGER> | Call | ArrayAccess | ScalarAccess) * conflito de ID
Exprtest::= <LPAR>Lhs<RELA_OP>Rhs<RPAR>
While::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>
If::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> (<ELSE> <LCHAVETA> Stmtlst <RCHAVETA>)?
Call::=<ID> ("."<ID>)? <LPAR> (ArgumentList)? <RPAR>
ArgumentList::= Argument(<VIRG> Argument)*
Argument::= (<ID> | <STRING> | <INTEGER>)
ArrayAccess::= <ID> "["Index"]"
ScalarAccess::= <ID> ("." <SIZE>)?
Index::= <ID> | <INTEGER>


<ID> (ArrayXaccess() | ScalarAccess2())

Lhs::= ArrayOrScalar

ArrayXAccess::= "["Index"]"
ScalarAccess2::= ("." <SIZE>)?

ArrayOrScalar ::= <ID> (ArrayXAccess() | ScalarAccess2())

Assign::= Lhs<ASSIGN>Rhs<PVIRG>
Call::=<ID> ("."<ID>)? <LPAR> (ArgumentList)? <RPAR>


Assign id asdas  =

Simplificar#Cond(res==true) ::= res = Simplificar <ASSIGN> RHS
Simplificar2 ::= (<ID>  Diferenca) return false;

*/

/* Gramatica simplificada
Module -> a b c DeclarationK FunctionK d.
DeclarationK -> Declaration DeclarationK | .
FunctionK -> Function FunctionK | .
Declaration -> (ArrayElement | ScalarElement) (e ((ArraySize) | (f)? n))? g.
Function -> ((h (ArrayElement | ScalarElement) e b i (Varlist)? j) | (h b i (Varlist)? j)) c Stmtlst d.
Varlist -> (ArrayElement | ScalarElement) KleeneStar1.
KleeneStar1 -> k (ArrayElement | ScalarElement) KleeneStar1 | .
ArrayElement -> b  .
ScalarElement -> b.
Stmtlst -> StmtK.
StmtK -> Stmt StmtK | .
Stmt -> While | If | Assign | Call g.
Assign -> Lhs e Rhs g.
Lhs -> ArrayAccess | ScalarAccess.
Rhs ->(Term ((l | m | f) Term)?) | ArraySize.
ArraySize -> ScalarAccess | n.
Term -> (f)? (n | Call | ArrayAccess | ScalarAccess).
Exprtest -> i Lhs z Rhs j.
While -> x Exprtest c Stmtlst d.
If -> r Exprtest c Stmtlst d (p c Stmtlst d)?.
Call -> b (.b)? i (ArgumentList)? j.
ArgumentList -> Argument KleeneStar2.
KleeneStar2 -> k Argument KleeneStar2 | .
Argument -> (b | o | n).
ArrayAccess -> b Index.
ScalarAccess -> b (q)?.
Index -> b | n.

CONFLITOS : Stmt Lhs Term
*/

/*CHECK POINT 1
1.Develop a parser for yal using JavaCC and taking as starting point the yal grammar
furnished (note that the original grammar may originate conflicts when implemented
with parsers of LL(1) type and in that case you need to modify the grammar in order
to eliminate those conflicts);

2. Proceed with the specification of the file jjt to generate , using JJTree, a new
version of the parser including in this case the generation of the syntax tree (the
generated tree should be an AST ), annotating the nodes and leafs of the tree with
the information (including tokens) necessary to perform the subsequent compiler steps ;

3. Include the necessary symbol tables;

4. Semantic Analysis;
*/
